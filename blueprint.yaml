#! (ROOT, REQUIRED) Only the root folder will have the following:

.git/: 
  #! The .git folder is generated by the "git init" command.

.gitignore: 
  |
  List of files and folders that git ignores when committing and pushing

.venv/: 
  #! The .venv folder is generated by running "python3 -m venv .venv"

setup.py/:
  #! for managing python pip packages
  #! pip-compile detects setup.py in the root directory, and creates a requirements.txt file

requirements.txt/:
  #! list of pip packages installed for the application
  #! generated by running "pip-compile"
  #! pip-compile looks at setup.py and installs packages listed in "install_requires" section of setup



#! (ROOT, RECOMMENDED) The root folder may have the following

.vscode/:
  settings.json: 
    #! contains specific vs code configuration for book-club app
    |
    {
        "editor.wordWrap": "wordWrapColumn",
        "files.exclude":{
            "**/.git": true,
            "**/.svn": true,
            "**/.hg": true,
            "**/CVS": true,
            "**/.DS_Store": true,
            "**/.venv": true, 
        }
    }

blueprint.yaml: 
  #! generated by running command "blueprint init"
  #! is used by blueprint python module to instantiate and keep track of template
  |
  (injects content at top of blueprint.yaml file as a comment)

  YAML file:
    - manages global and local configs 
    - defines the directory structure of the app


  Environment variables are ALL_CAPS Use scaffold_generator to create application scaffold Use map_loader to cr

  override > local > global

  blueprint 
  blueprint.generate_template 
  blueprint.diff_template 
  blueprint.load_envars 
  blueprint.load_genvars 
  blueprint.load_lenvars
  blueprint.override_envars

  folder vs file Aaa/ = folder .aaa = file aaa = file aaa.* = file

  blueprint init: creates .global directory blueprint create template:
  blueprint 

  if folder, | generates a README file if file, | adds comments to the top of
  the file if theres is no |, the text is not written in at all

  IMPORTANT FILES, FOLDERS, SYNTAX
  .envrc : for environment variables | : for rich text README : important
  details stored in text format

  glue contains all tools and configs that map over the entire application to
  provide a cohesive experience.

abstractions/: 

  README.md: 
    |
    Contains useful abstractions (think components, modules) that will be/may be useful in the future. However, don't necessarily know how to use these abstractions currently. I.e. don't know how it fits into current code base, how to organize functionality perfectly and synthetically. 

  blueprint/:

    README.md: 
      |
      folder syntax :
      file syntax :
      autodetects file type
        if markdown, use markdown styling
        if py, use python comments
        if rb, use ruby comments

    __init__.py: 
      |
    
  finaldraft/:
    README.md: 
      |
    takes blueprint.yaml and converts it into finaldraft.yaml

glue/:
  #! scripts to automate repititive tasks
  #! scripts to manage the application
  setup.py:
  manager.py: 
  |
  - Contains all book-club helper functions.
  - Will be eventually replaced by docker-compose



#! (ROOT, SITUATIONAL) The root folder may have the following, based on the type of project.

flask/: 
  #! framework for book-club's back end
  
  README.md: 
    |
    ### About


    - flask-specific configs
  
  pip package manager: abstr/:
  
  abstr/:
  
    airtable/:
  
    goodreads/:
  
  .envrc:
    FLASK_APP: ${pwd}/main-module.py
      
svelte/:



#! (DIR, RECOMMENDED) Every folder may have the following:

Makefile:
  #! commands to support
  #! pip-compile, pip-compile --upgrade, pip-sync
  #! pipdeptree
  #! 

README.md: 
  |
  - contains important application details, instructions, etc.

  ## Key
  b-c = book-club 
  b-c_venv = directory for managing virtual environment for b-c

  ## Directory Structure

  ## Packages
  flask           microframework for developing backend python apps
  python-dotenv   remembers flask environment variables


  ## Set Up
  ```sh
  brew install pyenv
  brew install direnv
  

  ```


  ## Tooling
  - fish, oh-my-fish : https://lobster1234.github.io/2017/04/08/setting-up-fish-and-iterm2/
  - direnv


  ## Rough Outline of Dev Process
  Set up basic development environment, all in the root folder of the project:
    
  ### Commands
  ```sh
  <os-package-manager> install direnv
  <os-package-manager> install pyenv
  ```
  
  ### Details
  *direnv:* 
  - shell extension to automatically load and unload environment variables, based on the current working directory. Environment variables must be located in a .envrc file. It is enough to have just one file in the root; as the project becomes more complicated, you can split up the .envrc files into smaller local ones. Eventually, these local envars will make their way into separate docker containers. The development process goes as follows:
  global envars -> local envars -> container envars.
  - need to modify $SHELL.rc file to use direnv
  
  *pyenv*
  - manage python distributions. Uses PYENV_VERSION envar.
  
  *python3 venv*
  - create a python virtual environment located at the root of the book-club application
  
  ## Flask development
  pip install flask

    
  ## Useful Commands

  ### bash
  echo, tee, sudo
  chsh

  ### git
  git log --all --decorate --oneline --graph
  git reset 'HEAD@{0}' : undo previous git action
  git reset 'HEAD@{n}' : go to state n actions ago
  git reset --soft HEAD~1

  ### pyenv commands
  pyenv install -v <python-distribution> : install a python dist to system
  pyenv versions : see all installed python distributions
  pyenv global <python-distribution> = set global python distribution for system
  pyenv local <> = set local python distribution (for the current directory). Allows you to use conda in one directory, and pip in another.
  
  ### python3 venv
  python3 -m venv .venv : create virtual environment
  source .venv/bin/activate : activate virtual environment

  ### pip 
  pip list : list all modules installed with pip

  ## Useful Linux Directories
  /etc/shells, /bin/<shell>, 

  ## VS Code
  - installed Rewrap extension, to automatically wrap lines every 80 characters
  - installed VSCodeVim extension for vim shortcuts
  - customize vs code color theme: https://code.visualstudio.com/api/extension-guides/color-theme


  ## Realizations
  - instead of using python-dotenv and pyenv, can just use direnv.


  ## To Dos:
  CURRENT
  [] set up direnv
  [] delete .flaskenv and .python-version, replace with .envrc
  []

  LATER
  [] write blueprint python module
  [] write finaldraft python module

.envrc: 
  #! Used by direnv (a shell extension) to automatically load and unload environment variables.
  |
  FLASK_APP: /main-module.py 
  PYENV_VERSION: 3.4.1



